generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  parentId  String?
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
}

model Product {
  id              String         @id @default(cuid())
  sku             String?        @unique
  name            String
  slug            String         @unique
  shortDesc       String?
  longDesc        String?        // markdown or HTML
  brand           String?
  modelNumber     String?
  categoryId      String?
  category        Category?      @relation(fields: [categoryId], references: [id])
  specs           Json?          // key-value specs
  tags            String[]       @default([])
  images          ProductImage[]
  catalogs        CatalogFile[]
  leads           ContactLead[]
  published       Boolean        @default(true)
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  alt       String?
  order     Int      @default(0)
}

model CatalogFile {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  filename  String
  size      Int?
  mimeType  String?
}

model ContactLead {
  id        String   @id @default(cuid())
  name      String
  phone     String
  email     String?
  message   String?
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  source    String?
}

model Author {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  bio       String?
  avatarUrl String?
  email     String?    @unique
  posts     BlogPost[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?
  content     String
  status      PostStatus  @default(PUBLISHED)
  publishedAt DateTime?
  authorId    String
  author      Author      @relation(fields: [authorId], references: [id])
  tags        PostTag[]
  images      PostImage[]
  metaTitle   String?
  metaDesc    String?
  featured    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Tag {
  id    String    @id @default(cuid())
  name  String
  slug  String    @unique
  posts PostTag[]
}

model PostTag {
  id     String   @id @default(cuid())
  postId String
  tagId  String
  post   BlogPost @relation(fields: [postId], references: [id])
  tag    Tag      @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
}

model PostImage {
  id      String   @id @default(cuid())
  postId  String
  post    BlogPost @relation(fields: [postId], references: [id])
  url     String
  alt     String?
  order   Int      @default(0)
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
